{"version":3,"sources":["components/InputBox.js","data-model/TodoModel.js","components/ListView.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","updateText","event","setState","inputText","target","value","resetText","keyCode","state","className","type","placeholder","onKeyDown","this","update","onKeyUp","onChange","React","Component","TodoModel","id","text","isCompleted","isShow","ListView","updateList","list","push","count","deleteTask","isDone","find","todo","filter","confirmAlert","title","message","buttons","label","onClick","complete","showX","show","filterSelect","selected","select","filterList","item","todoList","map","index","key","InputGroup","onMouseOver","onMouseOut","Prepend","Checkbox","aria-label","checked","style","aria-hidden","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.19c20fcf.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\n\r\nclass InputBox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputText: \"\"\r\n        }\r\n\r\n    }   \r\n\r\n    updateText = (event) =>{\r\n        this.setState({\r\n            inputText: event.target.value\r\n        });\r\n    }\r\n\r\n    resetText = (event) =>{\r\n        if (event.keyCode === 13){ \r\n            this.setState({\r\n                inputText: \"\"\r\n            });\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-group\">\r\n              <br/>\r\n              <h2>Todos</h2>\r\n              <br/>\r\n              <input type=\"text\" className=\"form-control\" placeholder=\"What's next?\" onKeyDown={this.props.update} onKeyUp={this.resetText} onChange={this.updateText} value={this.state.inputText}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputBox;","\r\nclass TodoModel{\r\n    constructor(id, text, isCompleted, isShow){\r\n        this.text = text;\r\n        this.isCompleted = isCompleted;\r\n        this.isShow = isShow;\r\n        this.id = id;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default TodoModel;","import React from 'react';\r\nimport InputBox from './InputBox';\r\nimport TodoModel from '../data-model/TodoModel';\r\nimport {InputGroup} from 'react-bootstrap'\r\nimport { confirmAlert } from 'react-confirm-alert'; \r\nimport 'react-confirm-alert/src/react-confirm-alert.css' \r\n\r\nclass ListView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {           \r\n            list: [],\r\n            count: 0,\r\n            id: 0,\r\n            select: \"all\"\r\n        }\r\n\r\n    }   \r\n\r\n\r\n    updateList = (event) =>{\r\n        if (event.keyCode === 13){  \r\n            this.state.list.push(new TodoModel(this.state.id ,event.target.value, false, false))         \r\n            this.setState({\r\n                list: this.state.list,\r\n                count: this.state.count+=1,\r\n                id: this.state.id+=1,\r\n            }); \r\n        }       \r\n    }\r\n\r\n   \r\n    deleteTask = (id, isDone) =>{\r\n        const task = this.state.list.find(todo => todo.id === id)\r\n        if (task.isCompleted =  isDone){            \r\n            this.setState({\r\n                list: this.state.list.filter(todo => todo.id !== id)\r\n            });\r\n        }else{\r\n            confirmAlert({\r\n                title: 'Confirm to delete unfinished task: ',\r\n                message: 'Are you sure you want to delete an unfinished task?',\r\n                buttons: [\r\n                  {\r\n                    label: 'Yes',\r\n                    onClick: () => this.setState({\r\n                        list: this.state.list.filter(todo => todo.id !== id),\r\n                        count: this.state.count-=1\r\n                    })\r\n                  },\r\n                  {\r\n                    label: 'No',\r\n                  }\r\n                ]\r\n              })\r\n        } \r\n    }\r\n   \r\n    complete = (id, isDone) =>{\r\n       \r\n        this.state.list.find(todo => todo.id === id).isCompleted =  isDone ? false:true\r\n        this.setState({               \r\n            list: this.state.list,\r\n            count: isDone ? this.state.count+=1:this.state.count-=1\r\n        });\r\n    }\r\n\r\n    showX = (id, show)=>{\r\n        this.state.list.find(todo => todo.id === id).isShow = show\r\n        this.setState({               \r\n            list: this.state.list,\r\n        });\r\n    }\r\n   \r\n    filterSelect = (selected) =>{\r\n        this.setState({               \r\n            select: this.state.select= selected\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const list = this.state.list;\r\n\r\n        let filterList = list\r\n        if(this.state.select == \"active\" ){\r\n            filterList = list.filter(item => (item.isCompleted==false))\r\n        }else if(this.state.select == \"completed\"){\r\n            filterList = list.filter(item => (item.isCompleted==true))\r\n        }\r\n        const todoList = filterList.map((todo, index) =>\r\n            <div key={index} >\r\n                <InputGroup onMouseOver={()=>this.showX(todo.id,true)} onMouseOut={()=>this.showX(todo.id, false)} className=\"mb-3 input-group\">\r\n                    <InputGroup.Prepend >\r\n                    <InputGroup.Checkbox aria-label=\"Checkbox\" value={todo.isCompleted} onClick={()=>this.complete(todo.id,todo.isCompleted)} checked={todo.isCompleted} />\r\n                    </InputGroup.Prepend> \r\n                    <h3 className={todo.isCompleted? \"done\": \"\"}>{todo.text} </h3>\r\n                    <button style= {{\"visibility\":  todo.isShow ?  \"visible\": \"hidden\" }} type=\"button\" className=\"close\" onClick={()=>this.deleteTask(todo.id,todo.isCompleted)} aria-label=\"Close\"> <span aria-hidden=\"true\" >&times;</span> </button>\r\n                </InputGroup>                \r\n            </div>\r\n            );\r\n\r\n        return (\r\n            <div>\r\n                <InputBox update={this.updateList}/>\r\n                {todoList}\r\n                <div className=\"footer\">\r\n                    <h3>{this.state.count} tasks left</h3>\r\n                    <div className=\"selector\">\r\n                        <button type=\"button\" onClick={()=>this.filterSelect(\"all\")}> <h5 className={this.state.select === \"all\" ? \"selected\":\"\"}>All</h5> </button>\r\n                        <button type=\"button\" onClick={()=>this.filterSelect(\"active\")}> <h5 className={this.state.select === \"active\" ? \"selected\":\"\"} >Active</h5> </button>\r\n                        <button type=\"button\" onClick={()=>this.filterSelect(\"completed\")}> <h5 className={this.state.select === \"completed\" ? \"selected\":\"\"}>Completed</h5> </button>\r\n                    </div>\r\n                </div>               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListView;","import React from 'react';\nimport ListView from './components/ListView';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends React.Component {\n\n  render() { \n\n    return (\n      <div className=\"App\">\n        <ListView/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}